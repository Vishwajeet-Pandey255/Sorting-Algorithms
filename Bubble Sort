
public class BubbleSort {

    public static void main(String[] args) {
        int[] arr = {5, 3, 8, 6, 2, 7, 4, 1};
        bubbleSort(arr);

        System.out.println("Sorted Array:");
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }

    public static void bubbleSort(int[] arr) {
        int n = arr.length;
        boolean swapped;

        for (int i = 0; i < n - 1; i++) {
            swapped = false;

            // Compare adjacent elements
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    // Swap elements if they are in the wrong order
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                    swapped = true;
                }
            }

            // If no elements were swapped, array is already sorted
            if (!swapped) {
                break;
            }
        }
    }
}




Time Complexity:
Best Case (Already Sorted Array):
O(n): The loop runs once without any swaps due to the swapped flag.
Worst Case (Reversely Sorted Array):
O(n²): Maximum number of comparisons and swaps occurs.
Average Case:
O(n²): For a random order of elements.
Space Complexity:
O(1): It sorts the array in place and uses only a constant amount of extra space for variables.
